<project name="ZAP-Extensions" default="build-all" basedir=".">
        <description>Build ZAP extensions</description>

        <property name="src" location="../src" />
        <property name="src.version" value="1.7" />
        <property name="build" location="build" />
        <property name="dist" location="zap-exts" />
        <property name="dist.lib.dir" location="../lib" />
        <property name="status" value="alpha" />
        <property name="versions.file" location="${dist}/ZapVersions.xml" />
        <!-- This assumes you also have the zaproxy project -->
        <property name="zap.plugin.dir" location="../../zaproxy/src/plugin" />
        
        <target name="clean">
                <delete dir="${dist}" includeEmptyDirs="true" />
                <delete dir="${build}" includeEmptyDirs="true" />
        </target>

        <target name="init">
                <!-- Create the build directory structure used by compile -->
                <mkdir dir="${dist}" />
                <mkdir dir="${build}" />
        </target>

        <target name="compile" depends="init" description="compile the source">
                <echo message="Compiling the source..." />
                
                <!-- Compile with debug information if the property "javac.debug" is set to true -->
                <local name="debug" />
                <condition property="debug" value="true" else="false">
                        <istrue value="${javac.debug}" />
                </condition>
                
                <!-- Compile the java code from ${src} into ${build} -->
                <javac srcdir="${src}" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}" encoding="UTF-8">
                        <classpath>
                                <fileset dir="${dist.lib.dir}">
                                        <include name="**/*.jar" />
                                </fileset>
                        </classpath>
                </javac>
        </target>

        <!--
         Build the specified extension
         version should be an integer that increments on each release, starting at 1
         -->

        <target name="append-to-versions-file" description="appends the extension details to the versions xml file" unless="addon-example">
                <length file="${dist}/${file}" property="length" />
        <tstamp>
            <format property="yyyymmdd" pattern="yyyy-MM-dd"/>
        </tstamp>
                <echo file="${versions.file}" append="true">
        &lt;addon>${extension}&lt;/addon>
        &lt;addon_${extension}>
                &lt;name>${name}&lt;/name>
                &lt;description>${description}&lt;/description>
                &lt;author>${author}&lt;/author>
                &lt;version>${version}&lt;/version>
                &lt;file>${file}&lt;/file>
                &lt;status>${status}&lt;/status>
                &lt;changes>${changes}&lt;/changes>
                &lt;url>https://zap-extensions.googlecode.com/files/${file}&lt;/url>
                &lt;size>${length}&lt;/size>
                &lt;date>${yyyymmdd}&lt;/date>
        &lt;/addon_${extension}>
</echo>
        </target>
        
        <target name="build-addon" description="build the specified addon">
                
                <xmlproperty file="${src}/org/zaproxy/zap/extension/${addon}/ZapAddOn.xml"/>
                <property name="file" value="${addon}-${status}-${zapaddon.version}.zap" />
                
                <antcall target="build-addon-help"> 
                        <param name="addon" value="${addon}"/>
                </antcall>

                <jar jarfile="${dist}/${file}" update="true" compress="true">
                        <zipfileset dir="${build}" prefix="">
                                <include name="org/zaproxy/zap/extension/${addon}/**"/>
                        </zipfileset>
                        <zipfileset dir="${src}" prefix="">
                                <include name="org/zaproxy/zap/extension/${addon}/Messages*"/>
                        </zipfileset>
                        <zipfileset dir="${src}" prefix="">
                                <include name="org/zaproxy/zap/extension/${addon}/resource/**"/>
                        </zipfileset>
                        <zipgroupfileset dir="${src}/org/zaproxy/zap/extension/${addon}/lib/" includes="*.jar" erroronmissingdir="false"/>
                        <zipfileset dir="${src}" includes="org/zaproxy/zap/extension/${addon}/ZapAddOn.xml" fullpath="ZapAddOn.xml"/>
                </jar>

                <antcall target="include-files"> 
                        <param name="addon" value="${addon}"/>
                        <param name="file" value="${file}"/>
                </antcall>

                <antcall target="cleanup-addon-help"> 
                        <param name="addon" value="${addon}"/>
                </antcall>

                <antcall target="append-to-versions-file"> 
                        <param name="extension" value="${addon}"/> 
                        <param name="name" value="${zapaddon.name}"/> 
                        <param name="version" value="${zapaddon.version}"/> 
                        <param name="description" value="${zapaddon.description}"/> 
                        <param name="author" value="${zapaddon.author}"/> 
                        <param name="url" value="${zapaddon.url}"/> 
                        <param name="changes" value="${zapaddon.changes}"/> 
                        <param name="file" value="${file}"/> 
                </antcall>
        </target>

        <target name="include-files" depends="is-files-available" if="files.available"> 
                <jar jarfile="${dist}/${file}" update="true" compress="true">
                        <zipfileset dir="${src}/org/zaproxy/zap/extension/${addon}/files/" prefix=""/>
                </jar>
        </target>

        <target name="build-addon-help" depends="is-help-available" if="help.available" description="generates the help file and copies it to the right place">
            <!--
                - runs if "help" directory is present
                - creates help.jar which is included in the extension-jar file
                - help.jar is dynamically merged into core help pages on ZAP start
            -->
                <local name="help.jar" />
        <property name="help.jar" value="help.jar" />
        
        <local name="help.package" />
            <property name="help.package" value="org/zaproxy/zap/extension/${addon}/resource/help" />
                
        <local name="help.target" />
        <property name="help.target" value="${build}/${help.package}/" />
        
        <!-- generate the indexes -->
        <java classname="com.sun.java.help.search.Indexer" fork="true" dir="${src}/${help.package}">
            <arg value="zaphelp"/>
            <classpath>
                <pathelement location="${dist.lib.dir}/jhall.jar" />
            </classpath>
        </java>
        
        <!-- delete the previous jar in the help directory (if present) -->
        <delete dir="${build}/${help.package}" />
        <mkdir dir="${build}/${help.package}" />

        <!-- as files reside in resource/ they are copied later -->
    </target>

        <target name="is-files-available">
            <available property="files.available" type="dir" file="${src}/org/zaproxy/zap/extension/${addon}/files"/>
        </target>
        

        <target name="is-help-available">
            <available property="help.available" type="dir" file="${src}/org/zaproxy/zap/extension/${addon}/resource/help"/>
        </target>
        
        <target name="cleanup-addon-help">
        <!-- delete the indexes, generated previously, as they are no longer needed. -->
        <delete dir="${src}/org/zaproxy/zap/extension/${addon}/resource/help/JavaHelpSearch" />
        </target>
        
        
        <target name="build-extension-help" depends="is-help-available" if="help.available" description="generates the help file and copies it to the right place">
            <!--
                - runs if "help" directory is present
                - creates help.jar which is included in the extension-jar file
                - help.jar is dynamically merged into core help pages on ZAP start
            -->
                <local name="help.jar" />
        <property name="help.jar" value="help.jar" />
        
        <local name="help.package" />
            <property name="help.package" value="org/zaproxy/zap/extension/${extension}/resource/help" />
                
        <local name="help.target" />
        <property name="help.target" value="${build}/${help.package}/" />
        
        <!-- generate the indexes -->
        <java classname="com.sun.java.help.search.Indexer" fork="true" dir="${src}/${help.package}">
            <arg value="zaphelp"/>
            <classpath>
                <pathelement location="${dist.lib.dir}/jhall.jar" />
            </classpath>
        </java>
        
        <!-- delete the previous jar in the help directory (if present) -->
        <delete dir="${build}/${help.package}" />
        <mkdir dir="${build}/${help.package}" />

        <!-- as files reside in resource/ they are copied later -->
    </target>
    
        <target name="build-all" depends="clean,compile" description="build all of the extensions">
                <delete file="${versions.file}"/>
                
                <echo file="${versions.file}" append="true">&lt;ZAP></echo>
                
                <!-- 'Standard' addons (keep in alphabetical order ;) -->
                <antcall target="build-addon"><param name="addon" value="ascanrulesAlpha"/></antcall>
                <antcall target="build-addon"><param name="addon" value="diff"/></antcall>
                <antcall target="build-addon"><param name="addon" value="highlighter"/></antcall>
                <antcall target="build-addon"><param name="addon" value="mitmconf"/></antcall>
                <antcall target="build-addon"><param name="addon" value="pscanrulesAlpha"/></antcall>
                <!--antcall target="build-addon"><param name="addon" value="sitetools"/></antcall-->
                <antcall target="build-addon"><param name="addon" value="sse"/></antcall>
                <antcall target="build-addon"><param name="addon" value="zest"/></antcall>

                <echo file="${versions.file}" append="true">&lt;/ZAP></echo>

        </target>

        <target name="deploy-extension" description="deploy the specified extension">
                <copy todir="${zap.plugin.dir}">
                        <fileset dir="${dist}">
                        <include name="${extension}-*.zap"/>
                        </fileset>
                </copy>
                <!--copy file="${dist}/${extension}.jar" toDir="${zap.plugin.dir}" overwrite="true" /-->
        </target>

        <target name="deploy-ascanrulesAlpha" depends="build-all" description="deploy the active scan rules">
                <antcall target="deploy-extension"> <param name="extension" value="ascanrulesAlpha"/> </antcall>
        </target>

        <target name="deploy-diff" depends="build-all" description="deploy the diff extension">
                <antcall target="deploy-extension"> <param name="extension" value="diff"/> </antcall>
        </target>
        
        <target name="deploy-highlighter" depends="build-all" description="deploy the highlighter extension">
                <antcall target="deploy-extension"> <param name="extension" value="highlighter"/> </antcall>
        </target>

        <target name="deploy-mitmConf" depends="build-all" description="deploy the MITM conf extension">
                <antcall target="deploy-extension"> <param name="extension" value="mitmconf"/> </antcall>
        </target>

        <target name="deploy-pscanrulesAlpha" depends="build-all" description="deploy the passive scan rules">
                <antcall target="deploy-extension"> <param name="extension" value="pscanrulesAlpha"/> </antcall>
        </target>

        <!--target name="deploy-siteTools" depends="build-all" description="deploy the SiteTools extension">
                <antcall target="deploy-extension"> <param name="extension" value="sitetools"/> </antcall>
        </target-->

        <target name="deploy-serverSentEvents" depends="build-all" description="deploy the Server-Sent Events extension">
                <antcall target="deploy-extension"> <param name="extension" value="serverSentEvents"/> </antcall>
        </target>
                
        <target name="deploy-zest" depends="build-all" description="deploy the Zest extension">
                <antcall target="deploy-extension"> <param name="extension" value="zest"/> </antcall>
        </target>
                
        <target name="deploy-all" depends="build-all" description="deploy all of the extensions">
                <!-- Keep in alphabetical order ;) -->
                <antcall target="deploy-ascanrulesAlpha"/>
                <antcall target="deploy-highlighter"/>
                <antcall target="deploy-mitmConf"/>
                <antcall target="deploy-pscanrulesAlpha"/>
                <antcall target="deploy-serverSentEvents"/>
                <antcall target="deploy-serverSentEvents"/>
                <!--antcall target="deploy-sitetools"/-->
        </target>

</project>
